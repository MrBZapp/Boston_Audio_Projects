
BawlerBox2_5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000346  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000346  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800060  00800060  000003da  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b27  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000150  00000000  00000000  00000b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000082d  00000000  00000000  00000ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000386  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000004c9  00000000  00000000  00001859  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000044c  00000000  00000000  00001d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000040c  00000000  00000000  00002170  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000083b  00000000  00000000  0000257c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000120  00000000  00000000  00002db7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__vector_1>
   4:	5c c0       	rjmp	.+184    	; 0xbe <__vector_2>
   6:	70 c1       	rjmp	.+736    	; 0x2e8 <__vector_3>
   8:	15 c1       	rjmp	.+554    	; 0x234 <__vector_4>
   a:	e7 c0       	rjmp	.+462    	; 0x1da <__vector_5>
   c:	93 c0       	rjmp	.+294    	; 0x134 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	3a c1       	rjmp	.+628    	; 0x28e <__vector_12>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>
  26:	0f c0       	rjmp	.+30     	; 0x46 <__bad_interrupt>
  28:	0e c0       	rjmp	.+28     	; 0x46 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a4 38       	cpi	r26, 0x84	; 132
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	7e c1       	rjmp	.+764    	; 0x342 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include "global.h"
#include "encoder.h"
#include "timer.h"

int main(void)
{
  48:	ff cf       	rjmp	.-2      	; 0x48 <main>

0000004a <__vector_1>:
		// set encoder direction pin for input and apply pullup resistor
		cbi(ENC1_PHASEB_DDR, ENC1_PHASEB_PIN);
		sbi(ENC1_PHASEB_PORT, ENC1_PHASEB_PIN);
		// configure interrupts for any-edge triggering
		sbi(ENC1_ICR, ENC1_ISCX0);
		cbi(ENC1_ICR, ENC1_ISCX1);
  4a:	1f 92       	push	r1
  4c:	0f 92       	push	r0
		// enable interrupts
		sbi(IMSK, ENC1_INT);	// ISMK is auto-defined in encoder.h
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	0f 92       	push	r0
  52:	11 24       	eor	r1, r1
		// enable interrupts
		sbi(IMSK, ENC3_INT);	// ISMK is auto-defined in encoder.h
	#endif
	
	// enable global interrupts
	sei();
  54:	8f 93       	push	r24
  56:	9f 93       	push	r25
	// else do nothing
}

#ifdef ENC0_VECT
//! Encoder 0 interrupt handler
ISR(ENC0_VECT){
  58:	af 93       	push	r26
  5a:	bf 93       	push	r27
  5c:	ef 93       	push	r30
  5e:	ff 93       	push	r31
	// encoder has generated a pulse
	// check the relative phase of the input channels
	// and update position accordingly
	if( ((ENC0_PHASEA_PORTIN & (1<<ENC0_PHASEA_PIN)) == 0) ^
  60:	90 b3       	in	r25, 0x10	; 16
		((ENC0_PHASEB_PORTIN & (1<<ENC0_PHASEB_PIN)) == 0) )
  62:	80 b3       	in	r24, 0x10	; 16
//! Encoder 0 interrupt handler
ISR(ENC0_VECT){
	// encoder has generated a pulse
	// check the relative phase of the input channels
	// and update position accordingly
	if( ((ENC0_PHASEA_PORTIN & (1<<ENC0_PHASEA_PIN)) == 0) ^
  64:	82 95       	swap	r24
  66:	81 70       	andi	r24, 0x01	; 1
  68:	92 fb       	bst	r25, 2
  6a:	99 27       	eor	r25, r25
  6c:	90 f9       	bld	r25, 0
  6e:	98 17       	cp	r25, r24
  70:	71 f0       	breq	.+28     	; 0x8e <__vector_1+0x44>
		((ENC0_PHASEB_PORTIN & (1<<ENC0_PHASEB_PIN)) == 0) )
	{
		EncoderState[0].position++;
  72:	ee e6       	ldi	r30, 0x6E	; 110
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	80 81       	ld	r24, Z
  78:	91 81       	ldd	r25, Z+1	; 0x01
  7a:	a2 81       	ldd	r26, Z+2	; 0x02
  7c:	b3 81       	ldd	r27, Z+3	; 0x03
  7e:	01 96       	adiw	r24, 0x01	; 1
  80:	a1 1d       	adc	r26, r1
  82:	b1 1d       	adc	r27, r1
  84:	80 83       	st	Z, r24
  86:	91 83       	std	Z+1, r25	; 0x01
  88:	a2 83       	std	Z+2, r26	; 0x02
  8a:	b3 83       	std	Z+3, r27	; 0x03
  8c:	0d c0       	rjmp	.+26     	; 0xa8 <__vector_1+0x5e>
	} else {
		EncoderState[0].position--;
  8e:	ee e6       	ldi	r30, 0x6E	; 110
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	91 81       	ldd	r25, Z+1	; 0x01
  96:	a2 81       	ldd	r26, Z+2	; 0x02
  98:	b3 81       	ldd	r27, Z+3	; 0x03
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	a1 09       	sbc	r26, r1
  9e:	b1 09       	sbc	r27, r1
  a0:	80 83       	st	Z, r24
  a2:	91 83       	std	Z+1, r25	; 0x01
  a4:	a2 83       	std	Z+2, r26	; 0x02
  a6:	b3 83       	std	Z+3, r27	; 0x03
	}
}
  a8:	ff 91       	pop	r31
  aa:	ef 91       	pop	r30
  ac:	bf 91       	pop	r27
  ae:	af 91       	pop	r26
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <__vector_2>:
#endif

#ifdef ENC1_VECT
//! Encoder 1 interrupt handler
ISR(ENC1_VECT){
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
	// encoder has generated a pulse
	// check the relative phase of the input channels
	// and update position accordingly
	if( ((inb(ENC1_PHASEA_PORTIN) & (1<<ENC1_PHASEA_PIN)) == 0) ^
  d4:	90 b3       	in	r25, 0x10	; 16
		((inb(ENC1_PHASEB_PORTIN) & (1<<ENC1_PHASEB_PIN)) == 0) )
  d6:	80 b3       	in	r24, 0x10	; 16
//! Encoder 1 interrupt handler
ISR(ENC1_VECT){
	// encoder has generated a pulse
	// check the relative phase of the input channels
	// and update position accordingly
	if( ((inb(ENC1_PHASEA_PORTIN) & (1<<ENC1_PHASEA_PIN)) == 0) ^
  d8:	85 fb       	bst	r24, 5
  da:	88 27       	eor	r24, r24
  dc:	80 f9       	bld	r24, 0
  de:	93 fb       	bst	r25, 3
  e0:	99 27       	eor	r25, r25
  e2:	90 f9       	bld	r25, 0
  e4:	98 17       	cp	r25, r24
  e6:	71 f0       	breq	.+28     	; 0x104 <__stack+0x25>
		((inb(ENC1_PHASEB_PORTIN) & (1<<ENC1_PHASEB_PIN)) == 0) )
	{
		EncoderState[1].position++;
  e8:	e2 e7       	ldi	r30, 0x72	; 114
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	91 81       	ldd	r25, Z+1	; 0x01
  f0:	a2 81       	ldd	r26, Z+2	; 0x02
  f2:	b3 81       	ldd	r27, Z+3	; 0x03
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	a1 1d       	adc	r26, r1
  f8:	b1 1d       	adc	r27, r1
  fa:	80 83       	st	Z, r24
  fc:	91 83       	std	Z+1, r25	; 0x01
  fe:	a2 83       	std	Z+2, r26	; 0x02
 100:	b3 83       	std	Z+3, r27	; 0x03
 102:	0d c0       	rjmp	.+26     	; 0x11e <__stack+0x3f>
	} else {
		EncoderState[1].position--;
 104:	e2 e7       	ldi	r30, 0x72	; 114
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	91 81       	ldd	r25, Z+1	; 0x01
 10c:	a2 81       	ldd	r26, Z+2	; 0x02
 10e:	b3 81       	ldd	r27, Z+3	; 0x03
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	a1 09       	sbc	r26, r1
 114:	b1 09       	sbc	r27, r1
 116:	80 83       	st	Z, r24
 118:	91 83       	std	Z+1, r25	; 0x01
 11a:	a2 83       	std	Z+2, r26	; 0x02
 11c:	b3 83       	std	Z+3, r27	; 0x03
	}
}
 11e:	ff 91       	pop	r31
 120:	ef 91       	pop	r30
 122:	bf 91       	pop	r27
 124:	af 91       	pop	r26
 126:	9f 91       	pop	r25
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_6>:
	OCR1B = pwmDuty;
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	ef 93       	push	r30
 154:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
 156:	80 91 78 00 	lds	r24, 0x0078
 15a:	90 91 79 00 	lds	r25, 0x0079
 15e:	a0 91 7a 00 	lds	r26, 0x007A
 162:	b0 91 7b 00 	lds	r27, 0x007B
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	a1 1d       	adc	r26, r1
 16a:	b1 1d       	adc	r27, r1
 16c:	80 93 78 00 	sts	0x0078, r24
 170:	90 93 79 00 	sts	0x0079, r25
 174:	a0 93 7a 00 	sts	0x007A, r26
 178:	b0 93 7b 00 	sts	0x007B, r27

	// increment pause counter
	TimerPauseReg++;
 17c:	80 91 7c 00 	lds	r24, 0x007C
 180:	90 91 7d 00 	lds	r25, 0x007D
 184:	a0 91 7e 00 	lds	r26, 0x007E
 188:	b0 91 7f 00 	lds	r27, 0x007F
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	a1 1d       	adc	r26, r1
 190:	b1 1d       	adc	r27, r1
 192:	80 93 7c 00 	sts	0x007C, r24
 196:	90 93 7d 00 	sts	0x007D, r25
 19a:	a0 93 7e 00 	sts	0x007E, r26
 19e:	b0 93 7f 00 	sts	0x007F, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
 1a2:	80 91 60 00 	lds	r24, 0x0060
 1a6:	90 91 61 00 	lds	r25, 0x0061
 1aa:	89 2b       	or	r24, r25
 1ac:	29 f0       	breq	.+10     	; 0x1b8 <__vector_6+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
 1ae:	e0 91 60 00 	lds	r30, 0x0060
 1b2:	f0 91 61 00 	lds	r31, 0x0061
 1b6:	09 95       	icall
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__vector_5>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	2f 93       	push	r18
 1e6:	3f 93       	push	r19
 1e8:	4f 93       	push	r20
 1ea:	5f 93       	push	r21
 1ec:	6f 93       	push	r22
 1ee:	7f 93       	push	r23
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	af 93       	push	r26
 1f6:	bf 93       	push	r27
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
 1fc:	80 91 62 00 	lds	r24, 0x0062
 200:	90 91 63 00 	lds	r25, 0x0063
 204:	89 2b       	or	r24, r25
 206:	29 f0       	breq	.+10     	; 0x212 <__vector_5+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
 208:	e0 91 62 00 	lds	r30, 0x0062
 20c:	f0 91 63 00 	lds	r31, 0x0063
 210:	09 95       	icall
}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <__vector_4>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
 256:	80 91 64 00 	lds	r24, 0x0064
 25a:	90 91 65 00 	lds	r25, 0x0065
 25e:	89 2b       	or	r24, r25
 260:	29 f0       	breq	.+10     	; 0x26c <__vector_4+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
 262:	e0 91 64 00 	lds	r30, 0x0064
 266:	f0 91 65 00 	lds	r31, 0x0065
 26a:	09 95       	icall
}
 26c:	ff 91       	pop	r31
 26e:	ef 91       	pop	r30
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	7f 91       	pop	r23
 27a:	6f 91       	pop	r22
 27c:	5f 91       	pop	r21
 27e:	4f 91       	pop	r20
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <__vector_12>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
 2b0:	80 91 66 00 	lds	r24, 0x0066
 2b4:	90 91 67 00 	lds	r25, 0x0067
 2b8:	89 2b       	or	r24, r25
 2ba:	29 f0       	breq	.+10     	; 0x2c6 <__vector_12+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
 2bc:	e0 91 66 00 	lds	r30, 0x0066
 2c0:	f0 91 67 00 	lds	r31, 0x0067
 2c4:	09 95       	icall
}
 2c6:	ff 91       	pop	r31
 2c8:	ef 91       	pop	r30
 2ca:	bf 91       	pop	r27
 2cc:	af 91       	pop	r26
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	7f 91       	pop	r23
 2d4:	6f 91       	pop	r22
 2d6:	5f 91       	pop	r21
 2d8:	4f 91       	pop	r20
 2da:	3f 91       	pop	r19
 2dc:	2f 91       	pop	r18
 2de:	0f 90       	pop	r0
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <__vector_3>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	2f 93       	push	r18
 2f4:	3f 93       	push	r19
 2f6:	4f 93       	push	r20
 2f8:	5f 93       	push	r21
 2fa:	6f 93       	push	r22
 2fc:	7f 93       	push	r23
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
 30a:	80 91 68 00 	lds	r24, 0x0068
 30e:	90 91 69 00 	lds	r25, 0x0069
 312:	89 2b       	or	r24, r25
 314:	29 f0       	breq	.+10     	; 0x320 <__vector_3+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
 316:	e0 91 68 00 	lds	r30, 0x0068
 31a:	f0 91 69 00 	lds	r31, 0x0069
 31e:	09 95       	icall
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <_exit>:
 342:	f8 94       	cli

00000344 <__stop_program>:
 344:	ff cf       	rjmp	.-2      	; 0x344 <__stop_program>

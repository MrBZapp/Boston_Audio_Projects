
Bawler2_5_CPP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000412  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000412  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800066  00800066  000004ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000428  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00009434  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002689  00000000  00000000  00009d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002d8d  00000000  00000000  0000c3c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ae4  00000000  00000000  0000f150  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00009c02  00000000  00000000  0000fc34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000035aa  00000000  00000000  00019836  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005c0  00000000  00000000  0001cde0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000034e3  00000000  00000000  0001d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:


#include "Button.h"

// default constructor
Button::Button( SFRaddress port, unsigned char pin, PeripheralHandler* pPeripheralHandler )
   0:	16 c0       	rjmp	.+44     	; 0x2e <__dtors_end>
{
	m_pPeripheralHandler = pPeripheralHandler;
   2:	3a c0       	rjmp	.+116    	; 0x78 <__bad_interrupt>
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
	io_Port = port;
   6:	38 c0       	rjmp	.+112    	; 0x78 <__bad_interrupt>
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
	io_Pin = pin;
   a:	36 c0       	rjmp	.+108    	; 0x78 <__bad_interrupt>
   c:	8e c0       	rjmp	.+284    	; 0x12a <__vector_6>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   e:	34 c0       	rjmp	.+104    	; 0x78 <__bad_interrupt>
		
/////////Read Methods/////////
		// get a byte at the specified index in the buffer (kind of like array access) ** note: this does not remove the byte that was read from the buffer
		T ReadIndex( unsigned char index ){
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
				T data = m_buffer->data[(index % (m_buffer->size))];
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	32 c0       	rjmp	.+100    	; 0x78 <__bad_interrupt>
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	30 c0       	rjmp	.+96     	; 0x78 <__bad_interrupt>
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	2e c0       	rjmp	.+92     	; 0x78 <__bad_interrupt>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
		 * beyond the edge of the buffer will return data internal to the buffer and clear the final entry
		 * which could result in data loss.*/
		T PopFromIndex( unsigned char index ){
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
				T returnData = this->ReadIndex( index );
				for( unsigned char i = index; i < (m_buffer->length-1) ; i++ ){
  1e:	2c c0       	rjmp	.+88     	; 0x78 <__bad_interrupt>
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	2a c0       	rjmp	.+84     	; 0x78 <__bad_interrupt>
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	28 c0       	rjmp	.+80     	; 0x78 <__bad_interrupt>
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>

0000002a <__ctors_start>:
  2a:	69 00       	.word	0x0069	; ????

0000002c <__ctors_end>:
  2c:	86 00       	.word	0x0086	; ????

0000002e <__dtors_end>:
  2e:	11 24       	eor	r1, r1
  30:	1f be       	out	0x3f, r1	; 63
					T tempData = this->ReadIndex( i + 1 );
  32:	cf e5       	ldi	r28, 0x5F	; 95
  34:	d1 e0       	ldi	r29, 0x01	; 1
		};
		
/////////Read Methods/////////
		// get a byte at the specified index in the buffer (kind of like array access) ** note: this does not remove the byte that was read from the buffer
		T ReadIndex( unsigned char index ){
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
  36:	de bf       	out	0x3e, r29	; 62
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  38:	cd bf       	out	0x3d, r28	; 61

0000003a <__do_copy_data>:
				T data = m_buffer->data[(index % (m_buffer->size))];
  3a:	10 e0       	ldi	r17, 0x00	; 0
  3c:	a0 e6       	ldi	r26, 0x60	; 96
  3e:	b0 e0       	ldi	r27, 0x00	; 0
  40:	e2 e1       	ldi	r30, 0x12	; 18
  42:	f4 e0       	ldi	r31, 0x04	; 4
  44:	02 c0       	rjmp	.+4      	; 0x4a <__SREG__+0xb>
  46:	05 90       	lpm	r0, Z+
  48:	0d 92       	st	X+, r0
  4a:	a6 36       	cpi	r26, 0x66	; 102
  4c:	b1 07       	cpc	r27, r17
  4e:	d9 f7       	brne	.-10     	; 0x46 <__SREG__+0x7>

00000050 <__do_clear_bss>:
  50:	20 e0       	ldi	r18, 0x00	; 0
  52:	a6 e6       	ldi	r26, 0x66	; 102
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  54:	b0 e0       	ldi	r27, 0x00	; 0
				return false;//return failure
			}
		}; // add a byte to the end of the buffer
		
		void OverwriteToIndex( T newData, unsigned char index ){
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
  56:	01 c0       	rjmp	.+2      	; 0x5a <.do_clear_bss_start>

00000058 <.do_clear_bss_loop>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  58:	1d 92       	st	X+, r1

0000005a <.do_clear_bss_start>:
				m_buffer->data[ index % (m_buffer->size) ] = newData;
  5a:	ae 36       	cpi	r26, 0x6E	; 110
  5c:	b2 07       	cpc	r27, r18
  5e:	e1 f7       	brne	.-8      	; 0x58 <.do_clear_bss_loop>

00000060 <__do_global_ctors>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	cc e2       	ldi	r28, 0x2C	; 44
  64:	d0 e0       	ldi	r29, 0x00	; 0
  66:	03 c0       	rjmp	.+6      	; 0x6e <__do_global_ctors+0xe>
  68:	22 97       	sbiw	r28, 0x02	; 2
  6a:	fe 01       	movw	r30, r28
  6c:	9b d0       	rcall	.+310    	; 0x1a4 <__tablejump__>
  6e:	ca 32       	cpi	r28, 0x2A	; 42
  70:	d1 07       	cpc	r29, r17
  72:	d1 f7       	brne	.-12     	; 0x68 <__do_global_ctors+0x8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
  74:	02 d0       	rcall	.+4      	; 0x7a <main>
		 * beyond the edge of the buffer will return data internal to the buffer and clear the final entry
		 * which could result in data loss.*/
		T PopFromIndex( unsigned char index ){
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
				T returnData = this->ReadIndex( index );
				for( unsigned char i = index; i < (m_buffer->length-1) ; i++ ){
  76:	c1 c1       	rjmp	.+898    	; 0x3fa <__do_global_dtors>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <main>:
  7a:	88 e1       	ldi	r24, 0x18	; 24
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	f8 94       	cli
  80:	81 bd       	out	0x21, r24	; 33
  82:	11 bc       	out	0x21, r1	; 33
  84:	0f be       	out	0x3f, r0	; 63
  86:	f8 94       	cli
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	80 95       	com	r24
  8c:	88 bb       	out	0x18, r24	; 24
  8e:	e0 91 66 00 	lds	r30, 0x0066
  92:	f0 91 67 00 	lds	r31, 0x0067
					T tempData = this->ReadIndex( i + 1 );
					this->OverwriteToIndex( tempData, i );
				}
				//clear final list item
				T backFill = {0};
				m_buffer->data[m_buffer->length-1] = backFill;
  96:	83 81       	ldd	r24, Z+3	; 0x03
  98:	35 e0       	ldi	r19, 0x05	; 5
  9a:	92 81       	ldd	r25, Z+2	; 0x02
  9c:	89 17       	cp	r24, r25
  9e:	08 f0       	brcs	.+2      	; 0xa2 <main+0x28>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x26>
  a2:	2f b7       	in	r18, 0x3f	; 63
				m_buffer->length--;//re-size the buffer
  a4:	f8 94       	cli
  a6:	e0 91 66 00 	lds	r30, 0x0066
  aa:	f0 91 67 00 	lds	r31, 0x0067
  ae:	83 81       	ldd	r24, Z+3	; 0x03
  b0:	62 81       	ldd	r22, Z+2	; 0x02
	*m_gpio_register |= 0x00; //clear the I/O register to prepare for flag.
} //FlagHandler

unsigned char FlagHandler::GetNewFlag(){
	return m_flagsInUse.PopFromIndex( 0 );
}
  b2:	6a d0       	rcall	.+212    	; 0x188 <__udivmodqi4>
  b4:	01 90       	ld	r0, Z+
  b6:	f0 81       	ld	r31, Z
  b8:	e0 2d       	mov	r30, r0
  ba:	e9 0f       	add	r30, r25

/////////Write Methods/////////
		bool AddToEnd( T newData ){
			if(m_buffer->length < m_buffer->size){ // make sure the buffer has room
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
					m_buffer->data[m_buffer->length % m_buffer->size] = newData; //Add the data to the address at which length points.
  bc:	f1 1d       	adc	r31, r1
  be:	30 83       	st	Z, r19
  c0:	2f bf       	out	0x3f, r18	; 63
				}
				m_buffer->length++; // Update the length by one
  c2:	e0 91 66 00 	lds	r30, 0x0066
  c6:	f0 91 67 00 	lds	r31, 0x0067
  ca:	83 81       	ldd	r24, Z+3	; 0x03
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	83 83       	std	Z+3, r24	; 0x03
  d0:	e4 cf       	rjmp	.-56     	; 0x9a <main+0x20>

000000d2 <_GLOBAL__sub_I__Znwj>:
		for( unsigned char i; i = 5 ; i--){
		PORTB ^= testBuff.PopFromIndex(i);
		}
	}
	return 0;
}
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
void * operator new(size_t size);
void operator delete(void * ptr);

void * operator new(size_t size)
{
	return malloc(size);
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	67 d0       	rcall	.+206    	; 0x1ac <malloc>

template <class T>	
class Buffer{
	public:
		Buffer( unsigned char specSize )
			: m_buffer (new TemplateBuffer<T>)
  de:	90 93 67 00 	sts	0x0067, r25
  e2:	80 93 66 00 	sts	0x0066, r24
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
  e6:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  e8:	f8 94       	cli
				m_buffer->data = new T[specSize]; // create the internal array
  ea:	c0 91 66 00 	lds	r28, 0x0066
  ee:	d0 91 67 00 	lds	r29, 0x0067
	free(ptr);
}

void * operator new[](size_t size)
{
	return malloc(size);
  f2:	85 e0       	ldi	r24, 0x05	; 5
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	5a d0       	rcall	.+180    	; 0x1ac <malloc>
  f8:	99 83       	std	Y+1, r25	; 0x01
  fa:	88 83       	st	Y, r24
				m_buffer->size = specSize; // set the size of the buffer to the specified
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	8a 83       	std	Y+2, r24	; 0x02
				m_buffer->length = 0;
 100:	1b 82       	std	Y+3, r1	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 102:	1f bf       	out	0x3f, r17	; 63
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	08 95       	ret

0000010c <_GLOBAL__sub_D__Znwj>:
		void Flush(){ //! flush (clear) the contents of the buffer WIP
			m_buffer->length = 0;
		};
		
		~Buffer(){ //destructor
			delete[] m_buffer->data;
 10c:	e0 91 66 00 	lds	r30, 0x0066
 110:	f0 91 67 00 	lds	r31, 0x0067
 114:	80 81       	ld	r24, Z
 116:	91 81       	ldd	r25, Z+1	; 0x01
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	29 f0       	breq	.+10     	; 0x126 <_GLOBAL__sub_D__Znwj+0x1a>
}

void operator delete[](void * ptr)
{
	if (ptr)
		free(ptr);
 11c:	df d0       	rcall	.+446    	; 0x2dc <free>
 11e:	e0 91 66 00 	lds	r30, 0x0066
 122:	f0 91 67 00 	lds	r31, 0x0067
	return malloc(size);
}

void operator delete(void * ptr)
{
	free(ptr);
 126:	cf 01       	movw	r24, r30
 128:	d9 c0       	rjmp	.+434    	; 0x2dc <free>

0000012a <__vector_6>:
					T tempData = this->ReadIndex( i + 1 );
					this->OverwriteToIndex( tempData, i );
				}
				//clear final list item
				T backFill = {0};
				m_buffer->data[m_buffer->length-1] = backFill;
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
				m_buffer->length--;//re-size the buffer
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
    __asm__ volatile ("" ::: "memory");
 144:	af 93       	push	r26
	return m_EventSchedule_blocking.SpaceUsed();
}

void Scheduler::ProcessTime( time newTime ){
	ScheduledEvent* testEvent;
	for(signed char i = m_EventSchedule_blocking.SpaceUsed(); i >= 0; i--){//iterate through each event
 146:	bf 93       	push	r27
 148:	ef 93       	push	r30
						m_EventSchedule_blocking.PopFromIndex( i );
					}
				} 
			}
	}
}
 14a:	ff 93       	push	r31
 14c:	e0 91 68 00 	lds	r30, 0x0068
 150:	f0 91 69 00 	lds	r31, 0x0069
 154:	87 81       	ldd	r24, Z+7	; 0x07
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	87 83       	std	Z+7, r24	; 0x07
 15a:	02 80       	ldd	r0, Z+2	; 0x02
 15c:	f3 81       	ldd	r31, Z+3	; 0x03
 15e:	e0 2d       	mov	r30, r0
 160:	09 95       	icall
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	89 bf       	out	0x39, r24	; 57
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
		 * beyond the edge of the buffer will return data internal to the buffer and clear the final entry
		 * which could result in data loss.*/
		T PopFromIndex( unsigned char index ){
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
				T returnData = this->ReadIndex( index );
				for( unsigned char i = index; i < (m_buffer->length-1) ; i++ ){
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
					T tempData = this->ReadIndex( i + 1 );
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
		};
		
/////////Read Methods/////////
		// get a byte at the specified index in the buffer (kind of like array access) ** note: this does not remove the byte that was read from the buffer
		T ReadIndex( unsigned char index ){
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 182:	0f 90       	pop	r0
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 184:	1f 90       	pop	r1
				T data = m_buffer->data[(index % (m_buffer->size))];
 186:	18 95       	reti

00000188 <__udivmodqi4>:
 188:	99 1b       	sub	r25, r25
 18a:	79 e0       	ldi	r23, 0x09	; 9
 18c:	04 c0       	rjmp	.+8      	; 0x196 <__udivmodqi4_ep>

0000018e <__udivmodqi4_loop>:
 18e:	99 1f       	adc	r25, r25
 190:	96 17       	cp	r25, r22
 192:	08 f0       	brcs	.+2      	; 0x196 <__udivmodqi4_ep>
 194:	96 1b       	sub	r25, r22

00000196 <__udivmodqi4_ep>:
 196:	88 1f       	adc	r24, r24
 198:	7a 95       	dec	r23
 19a:	c9 f7       	brne	.-14     	; 0x18e <__udivmodqi4_loop>
 19c:	80 95       	com	r24
 19e:	08 95       	ret

000001a0 <__tablejump2__>:
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31

000001a4 <__tablejump__>:
 1a4:	05 90       	lpm	r0, Z+
 1a6:	f4 91       	lpm	r31, Z
 1a8:	e0 2d       	mov	r30, r0
 1aa:	09 94       	ijmp

000001ac <malloc>:
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	91 05       	cpc	r25, r1
 1b4:	10 f4       	brcc	.+4      	; 0x1ba <malloc+0xe>
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	e0 91 6c 00 	lds	r30, 0x006C
				return data;
 1be:	f0 91 6d 00 	lds	r31, 0x006D
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	a0 e0       	ldi	r26, 0x00	; 0
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	30 97       	sbiw	r30, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1cc:	39 f1       	breq	.+78     	; 0x21c <malloc+0x70>
    __asm__ volatile ("" ::: "memory");
 1ce:	40 81       	ld	r20, Z
 1d0:	51 81       	ldd	r21, Z+1	; 0x01
 1d2:	48 17       	cp	r20, r24
 1d4:	59 07       	cpc	r21, r25
 1d6:	b8 f0       	brcs	.+46     	; 0x206 <malloc+0x5a>
 1d8:	48 17       	cp	r20, r24
 1da:	59 07       	cpc	r21, r25
 1dc:	71 f4       	brne	.+28     	; 0x1fa <malloc+0x4e>
 1de:	82 81       	ldd	r24, Z+2	; 0x02
 1e0:	93 81       	ldd	r25, Z+3	; 0x03
 1e2:	10 97       	sbiw	r26, 0x00	; 0
 1e4:	29 f0       	breq	.+10     	; 0x1f0 <malloc+0x44>
 1e6:	13 96       	adiw	r26, 0x03	; 3
 1e8:	9c 93       	st	X, r25
 1ea:	8e 93       	st	-X, r24
 1ec:	12 97       	sbiw	r26, 0x02	; 2
				return false;//return failure
			}
		}; // add a byte to the end of the buffer
		
		void OverwriteToIndex( T newData, unsigned char index ){
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 1ee:	2c c0       	rjmp	.+88     	; 0x248 <malloc+0x9c>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1f0:	90 93 6d 00 	sts	0x006D, r25
				m_buffer->data[ index % (m_buffer->size) ] = newData;
 1f4:	80 93 6c 00 	sts	0x006C, r24
 1f8:	27 c0       	rjmp	.+78     	; 0x248 <malloc+0x9c>
 1fa:	21 15       	cp	r18, r1
 1fc:	31 05       	cpc	r19, r1
 1fe:	31 f0       	breq	.+12     	; 0x20c <malloc+0x60>
 200:	42 17       	cp	r20, r18
 202:	53 07       	cpc	r21, r19
 204:	18 f0       	brcs	.+6      	; 0x20c <malloc+0x60>
 206:	a9 01       	movw	r20, r18
 208:	db 01       	movw	r26, r22
 20a:	01 c0       	rjmp	.+2      	; 0x20e <malloc+0x62>
 20c:	ef 01       	movw	r28, r30
 20e:	9a 01       	movw	r18, r20
 210:	bd 01       	movw	r22, r26
 212:	df 01       	movw	r26, r30
 214:	02 80       	ldd	r0, Z+2	; 0x02
 216:	f3 81       	ldd	r31, Z+3	; 0x03
 218:	e0 2d       	mov	r30, r0
 21a:	d7 cf       	rjmp	.-82     	; 0x1ca <malloc+0x1e>
 21c:	21 15       	cp	r18, r1
 21e:	31 05       	cpc	r19, r1
 220:	f9 f0       	breq	.+62     	; 0x260 <malloc+0xb4>
 222:	28 1b       	sub	r18, r24
 224:	39 0b       	sbc	r19, r25
 226:	24 30       	cpi	r18, 0x04	; 4
 228:	31 05       	cpc	r19, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 22a:	80 f4       	brcc	.+32     	; 0x24c <malloc+0xa0>
		 * beyond the edge of the buffer will return data internal to the buffer and clear the final entry
		 * which could result in data loss.*/
		T PopFromIndex( unsigned char index ){
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
				T returnData = this->ReadIndex( index );
				for( unsigned char i = index; i < (m_buffer->length-1) ; i++ ){
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	9b 81       	ldd	r25, Y+3	; 0x03
 230:	61 15       	cp	r22, r1
 232:	71 05       	cpc	r23, r1
 234:	21 f0       	breq	.+8      	; 0x23e <malloc+0x92>
 236:	fb 01       	movw	r30, r22
 238:	93 83       	std	Z+3, r25	; 0x03
 23a:	82 83       	std	Z+2, r24	; 0x02
 23c:	04 c0       	rjmp	.+8      	; 0x246 <malloc+0x9a>
 23e:	90 93 6d 00 	sts	0x006D, r25
 242:	80 93 6c 00 	sts	0x006C, r24
 246:	fe 01       	movw	r30, r28
 248:	32 96       	adiw	r30, 0x02	; 2
 24a:	44 c0       	rjmp	.+136    	; 0x2d4 <malloc+0x128>
 24c:	fe 01       	movw	r30, r28
 24e:	e2 0f       	add	r30, r18
 250:	f3 1f       	adc	r31, r19
 252:	81 93       	st	Z+, r24
 254:	91 93       	st	Z+, r25
 256:	22 50       	subi	r18, 0x02	; 2
 258:	31 09       	sbc	r19, r1
 25a:	39 83       	std	Y+1, r19	; 0x01
 25c:	28 83       	st	Y, r18
 25e:	3a c0       	rjmp	.+116    	; 0x2d4 <malloc+0x128>
 260:	20 91 6a 00 	lds	r18, 0x006A
 264:	30 91 6b 00 	lds	r19, 0x006B
 268:	23 2b       	or	r18, r19
 26a:	41 f4       	brne	.+16     	; 0x27c <malloc+0xd0>
 26c:	20 91 62 00 	lds	r18, 0x0062
 270:	30 91 63 00 	lds	r19, 0x0063
 274:	30 93 6b 00 	sts	0x006B, r19
 278:	20 93 6a 00 	sts	0x006A, r18
 27c:	20 91 60 00 	lds	r18, 0x0060
 280:	30 91 61 00 	lds	r19, 0x0061
 284:	21 15       	cp	r18, r1
 286:	31 05       	cpc	r19, r1
 288:	41 f4       	brne	.+16     	; 0x29a <malloc+0xee>
 28a:	2d b7       	in	r18, 0x3d	; 61
 28c:	3e b7       	in	r19, 0x3e	; 62
 28e:	40 91 64 00 	lds	r20, 0x0064
 292:	50 91 65 00 	lds	r21, 0x0065
 296:	24 1b       	sub	r18, r20
 298:	35 0b       	sbc	r19, r21
 29a:	e0 91 6a 00 	lds	r30, 0x006A
 29e:	f0 91 6b 00 	lds	r31, 0x006B
 2a2:	e2 17       	cp	r30, r18
 2a4:	f3 07       	cpc	r31, r19
 2a6:	a0 f4       	brcc	.+40     	; 0x2d0 <malloc+0x124>
 2a8:	2e 1b       	sub	r18, r30
 2aa:	3f 0b       	sbc	r19, r31
 2ac:	28 17       	cp	r18, r24
 2ae:	39 07       	cpc	r19, r25
 2b0:	78 f0       	brcs	.+30     	; 0x2d0 <malloc+0x124>
 2b2:	ac 01       	movw	r20, r24
 2b4:	4e 5f       	subi	r20, 0xFE	; 254
 2b6:	5f 4f       	sbci	r21, 0xFF	; 255
 2b8:	24 17       	cp	r18, r20
 2ba:	35 07       	cpc	r19, r21
 2bc:	48 f0       	brcs	.+18     	; 0x2d0 <malloc+0x124>
 2be:	4e 0f       	add	r20, r30
 2c0:	5f 1f       	adc	r21, r31
 2c2:	50 93 6b 00 	sts	0x006B, r21
 2c6:	40 93 6a 00 	sts	0x006A, r20
 2ca:	81 93       	st	Z+, r24
 2cc:	91 93       	st	Z+, r25
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <malloc+0x128>
 2d0:	e0 e0       	ldi	r30, 0x00	; 0
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	cf 01       	movw	r24, r30
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <free>:
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	00 97       	sbiw	r24, 0x00	; 0
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <free+0xa>
 2e4:	87 c0       	rjmp	.+270    	; 0x3f4 <free+0x118>
 2e6:	fc 01       	movw	r30, r24
 2e8:	32 97       	sbiw	r30, 0x02	; 2
 2ea:	13 82       	std	Z+3, r1	; 0x03
 2ec:	12 82       	std	Z+2, r1	; 0x02
 2ee:	c0 91 6c 00 	lds	r28, 0x006C
 2f2:	d0 91 6d 00 	lds	r29, 0x006D
 2f6:	20 97       	sbiw	r28, 0x00	; 0
 2f8:	81 f4       	brne	.+32     	; 0x31a <free+0x3e>
 2fa:	20 81       	ld	r18, Z
 2fc:	31 81       	ldd	r19, Z+1	; 0x01
 2fe:	28 0f       	add	r18, r24
 300:	39 1f       	adc	r19, r25
 302:	80 91 6a 00 	lds	r24, 0x006A
 306:	90 91 6b 00 	lds	r25, 0x006B
 30a:	82 17       	cp	r24, r18
 30c:	93 07       	cpc	r25, r19
 30e:	79 f5       	brne	.+94     	; 0x36e <free+0x92>
 310:	f0 93 6b 00 	sts	0x006B, r31
 314:	e0 93 6a 00 	sts	0x006A, r30
 318:	6d c0       	rjmp	.+218    	; 0x3f4 <free+0x118>
 31a:	de 01       	movw	r26, r28
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	ae 17       	cp	r26, r30
 322:	bf 07       	cpc	r27, r31
 324:	50 f4       	brcc	.+20     	; 0x33a <free+0x5e>
 326:	12 96       	adiw	r26, 0x02	; 2
 328:	4d 91       	ld	r20, X+
 32a:	5c 91       	ld	r21, X
 32c:	13 97       	sbiw	r26, 0x03	; 3
 32e:	9d 01       	movw	r18, r26
 330:	41 15       	cp	r20, r1
 332:	51 05       	cpc	r21, r1
 334:	09 f1       	breq	.+66     	; 0x378 <free+0x9c>
 336:	da 01       	movw	r26, r20
 338:	f3 cf       	rjmp	.-26     	; 0x320 <free+0x44>
 33a:	b3 83       	std	Z+3, r27	; 0x03
 33c:	a2 83       	std	Z+2, r26	; 0x02
 33e:	40 81       	ld	r20, Z
 340:	51 81       	ldd	r21, Z+1	; 0x01
 342:	84 0f       	add	r24, r20
 344:	95 1f       	adc	r25, r21
 346:	8a 17       	cp	r24, r26
 348:	9b 07       	cpc	r25, r27
 34a:	71 f4       	brne	.+28     	; 0x368 <free+0x8c>
 34c:	8d 91       	ld	r24, X+
 34e:	9c 91       	ld	r25, X
 350:	11 97       	sbiw	r26, 0x01	; 1
 352:	84 0f       	add	r24, r20
 354:	95 1f       	adc	r25, r21
 356:	02 96       	adiw	r24, 0x02	; 2
 358:	91 83       	std	Z+1, r25	; 0x01
 35a:	80 83       	st	Z, r24
 35c:	12 96       	adiw	r26, 0x02	; 2
 35e:	8d 91       	ld	r24, X+
 360:	9c 91       	ld	r25, X
 362:	13 97       	sbiw	r26, 0x03	; 3
 364:	93 83       	std	Z+3, r25	; 0x03
 366:	82 83       	std	Z+2, r24	; 0x02
 368:	21 15       	cp	r18, r1
 36a:	31 05       	cpc	r19, r1
 36c:	29 f4       	brne	.+10     	; 0x378 <free+0x9c>
 36e:	f0 93 6d 00 	sts	0x006D, r31
 372:	e0 93 6c 00 	sts	0x006C, r30
 376:	3e c0       	rjmp	.+124    	; 0x3f4 <free+0x118>
 378:	d9 01       	movw	r26, r18
 37a:	13 96       	adiw	r26, 0x03	; 3
 37c:	fc 93       	st	X, r31
 37e:	ee 93       	st	-X, r30
 380:	12 97       	sbiw	r26, 0x02	; 2
 382:	4d 91       	ld	r20, X+
 384:	5d 91       	ld	r21, X+
 386:	a4 0f       	add	r26, r20
 388:	b5 1f       	adc	r27, r21
 38a:	ea 17       	cp	r30, r26
 38c:	fb 07       	cpc	r31, r27
 38e:	79 f4       	brne	.+30     	; 0x3ae <free+0xd2>
 390:	80 81       	ld	r24, Z
 392:	91 81       	ldd	r25, Z+1	; 0x01
 394:	84 0f       	add	r24, r20
 396:	95 1f       	adc	r25, r21
 398:	02 96       	adiw	r24, 0x02	; 2
 39a:	d9 01       	movw	r26, r18
 39c:	11 96       	adiw	r26, 0x01	; 1
 39e:	9c 93       	st	X, r25
 3a0:	8e 93       	st	-X, r24
 3a2:	82 81       	ldd	r24, Z+2	; 0x02
 3a4:	93 81       	ldd	r25, Z+3	; 0x03
 3a6:	13 96       	adiw	r26, 0x03	; 3
 3a8:	9c 93       	st	X, r25
 3aa:	8e 93       	st	-X, r24
 3ac:	12 97       	sbiw	r26, 0x02	; 2
 3ae:	e0 e0       	ldi	r30, 0x00	; 0
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	9b 81       	ldd	r25, Y+3	; 0x03
 3b6:	00 97       	sbiw	r24, 0x00	; 0
 3b8:	19 f0       	breq	.+6      	; 0x3c0 <free+0xe4>
 3ba:	fe 01       	movw	r30, r28
 3bc:	ec 01       	movw	r28, r24
 3be:	f9 cf       	rjmp	.-14     	; 0x3b2 <free+0xd6>
 3c0:	ce 01       	movw	r24, r28
 3c2:	02 96       	adiw	r24, 0x02	; 2
 3c4:	28 81       	ld	r18, Y
 3c6:	39 81       	ldd	r19, Y+1	; 0x01
 3c8:	82 0f       	add	r24, r18
 3ca:	93 1f       	adc	r25, r19
 3cc:	20 91 6a 00 	lds	r18, 0x006A
 3d0:	30 91 6b 00 	lds	r19, 0x006B
 3d4:	28 17       	cp	r18, r24
 3d6:	39 07       	cpc	r19, r25
 3d8:	69 f4       	brne	.+26     	; 0x3f4 <free+0x118>
 3da:	30 97       	sbiw	r30, 0x00	; 0
 3dc:	29 f4       	brne	.+10     	; 0x3e8 <free+0x10c>
 3de:	10 92 6d 00 	sts	0x006D, r1
 3e2:	10 92 6c 00 	sts	0x006C, r1
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <free+0x110>
 3e8:	13 82       	std	Z+3, r1	; 0x03
 3ea:	12 82       	std	Z+2, r1	; 0x02
 3ec:	d0 93 6b 00 	sts	0x006B, r29
 3f0:	c0 93 6a 00 	sts	0x006A, r28
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <__do_global_dtors>:
 3fa:	10 e0       	ldi	r17, 0x00	; 0
 3fc:	cc e2       	ldi	r28, 0x2C	; 44
 3fe:	d0 e0       	ldi	r29, 0x00	; 0
 400:	03 c0       	rjmp	.+6      	; 0x408 <__do_global_dtors+0xe>
 402:	fe 01       	movw	r30, r28
 404:	cf de       	rcall	.-610    	; 0x1a4 <__tablejump__>
 406:	22 96       	adiw	r28, 0x02	; 2
 408:	ce 32       	cpi	r28, 0x2E	; 46
 40a:	d1 07       	cpc	r29, r17
 40c:	d1 f7       	brne	.-12     	; 0x402 <__do_global_dtors+0x8>
 40e:	f8 94       	cli

00000410 <__stop_program>:
 410:	ff cf       	rjmp	.-2      	; 0x410 <__stop_program>


Bawler2_5_CPP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000000e8  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800066  00800066  00000182  2**0
                  ALLOC
  3 .stab         000023ac  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000084b  00000000  00000000  00002530  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002d7b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000150  00000000  00000000  00002daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000145d  00000000  00000000  00002efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007d8  00000000  00000000  00004357  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000799  00000000  00000000  00004b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000324  00000000  00000000  000052c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006cc  00000000  00000000  000055ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e75  00000000  00000000  00005cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  00006b2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	TCCR1B = TCCR1B | (1 << WGM12); //turn on Clear on Timer compare frequency generation mode.
	this->SetFrequency( frequency ); // set OCR0A and prescalar to achieve nearest possible frequency
	this->SetOutput( output ); // Sets TCCR0A and DDR to the appropriate output
}

void Generator_16_Bit::SetFrequency( float frequency ){ //sets output compare registers to match frequency
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	51 c0       	rjmp	.+162    	; 0xb0 <__vector_6>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
	unsigned long prescale = 1;
	// Calculate the appropriate prescale
	if ( frequency > (F_CPU/0xFFFF) ){
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
		m_Timer.SetPrescale( TIMER_CLK_DIV1 );
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
	this->SetFrequency( frequency ); // set OCR0A and prescalar to achieve nearest possible frequency
	this->SetOutput( output ); // Sets TCCR0A and DDR to the appropriate output
}

void Generator_16_Bit::SetFrequency( float frequency ){ //sets output compare registers to match frequency
	unsigned long prescale = 1;
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	20 e0       	ldi	r18, 0x00	; 0
  38:	a6 e6       	ldi	r26, 0x66	; 102
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
	// Calculate the appropriate prescale
	if ( frequency > (F_CPU/0xFFFF) ){
		m_Timer.SetPrescale( TIMER_CLK_DIV1 );
	}
	else if ( frequency > ((F_CPU/8)/0xFFFF) ){
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a8 36       	cpi	r26, 0x68	; 104
  42:	b2 07       	cpc	r27, r18
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>

00000046 <__do_copy_data>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	e8 ee       	ldi	r30, 0xE8	; 232
  4e:	f0 e0       	ldi	r31, 0x00	; 0
		m_Timer.SetPrescale( TIMER_CLK_DIV8 );
  50:	02 c0       	rjmp	.+4      	; 0x56 <__do_copy_data+0x10>
  52:	05 90       	lpm	r0, Z+
  54:	0d 92       	st	X+, r0
  56:	a6 36       	cpi	r26, 0x66	; 102
		prescale = 8;
  58:	b1 07       	cpc	r27, r17
  5a:	d9 f7       	brne	.-10     	; 0x52 <__do_copy_data+0xc>
  5c:	02 d0       	rcall	.+4      	; 0x62 <main>
  5e:	42 c0       	rjmp	.+132    	; 0xe4 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <main>:
  62:	cf 93       	push	r28
	}
	else if ( frequency > ((F_CPU/64)/0xFFFF) ){
  64:	df 93       	push	r29
  66:	00 d0       	rcall	.+0      	; 0x68 <main+0x6>
  68:	cd b7       	in	r28, 0x3d	; 61
  6a:	de b7       	in	r29, 0x3e	; 62
  6c:	88 e1       	ldi	r24, 0x18	; 24
  6e:	0f b6       	in	r0, 0x3f	; 63
  70:	f8 94       	cli
  72:	81 bd       	out	0x21, r24	; 33
  74:	11 bc       	out	0x21, r1	; 33
		m_Timer.SetPrescale( TIMER_CLK_DIV64 );
  76:	0f be       	out	0x3f, r0	; 63
  78:	8e 01       	movw	r16, r28
  7a:	0f 5f       	subi	r16, 0xFF	; 255
  7c:	1f 4f       	sbci	r17, 0xFF	; 255
		prescale = 64;
  7e:	c8 01       	movw	r24, r16
  80:	04 d0       	rcall	.+8      	; 0x8a <_ZN6Timer8C1Ev>
  82:	c8 01       	movw	r24, r16
  84:	0f d0       	rcall	.+30     	; 0xa4 <_ZN6Timer815getTime_NoClearEv>
  86:	98 bb       	out	0x18, r25	; 24
  88:	fc cf       	rjmp	.-8      	; 0x82 <main+0x20>

0000008a <_ZN6Timer8C1Ev>:
	}
	else if ( frequency > ((F_CPU/256)/0xFFFF) ){
  8a:	23 b7       	in	r18, 0x33	; 51
  8c:	28 7f       	andi	r18, 0xF8	; 248
  8e:	21 60       	ori	r18, 0x01	; 1
  90:	23 bf       	out	0x33, r18	; 51
  92:	12 be       	out	0x32, r1	; 50
  94:	90 93 67 00 	sts	0x0067, r25
  98:	80 93 66 00 	sts	0x0066, r24
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	89 bf       	out	0x39, r24	; 57
		m_Timer.SetPrescale( TIMER_CLK_DIV256 );
  a0:	78 94       	sei
  a2:	08 95       	ret

000000a4 <_ZN6Timer815getTime_NoClearEv>:
  a4:	fc 01       	movw	r30, r24
		prescale = 256;
  a6:	82 b7       	in	r24, 0x32	; 50
  a8:	80 83       	st	Z, r24
  aa:	80 81       	ld	r24, Z
  ac:	91 81       	ldd	r25, Z+1	; 0x01
  ae:	08 95       	ret

000000b0 <__vector_6>:
	}
	else {
		m_Timer.SetPrescale( TIMER_CLK_DIV1024 );
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
		prescale = 1024;
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
		
	}
	// Calculate the mask and output
	m_Frequency = (unsigned long) ( F_CPU / ((frequency * 2 * prescale) ) - 1 );
  c0:	e0 91 66 00 	lds	r30, 0x0066
  c4:	f0 91 67 00 	lds	r31, 0x0067
  c8:	81 81       	ldd	r24, Z+1	; 0x01
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	81 83       	std	Z+1, r24	; 0x01
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	89 bf       	out	0x39, r24	; 57
  d2:	78 94       	sei
  d4:	ff 91       	pop	r31
  d6:	ef 91       	pop	r30
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>


MIDISysexBox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000718  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000718  000007cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000b8  00800070  00800070  000007dc  2**0
                  ALLOC
  3 .eeprom       000000c0  00810000  00810000  000007dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000005f  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  000008fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001465  00000000  00000000  00000b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000899  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000993  00000000  00000000  00002831  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006ac  00000000  00000000  000031c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c6  00000000  00000000  00003870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000da3  00000000  00000000  00004036  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00004dd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	d9 c0       	rjmp	.+434    	; 0x1b6 <__vector_1>
   4:	12 c1       	rjmp	.+548    	; 0x22a <__vector_2>
   6:	45 c2       	rjmp	.+1162   	; 0x492 <__vector_3>
   8:	ea c1       	rjmp	.+980    	; 0x3de <__vector_4>
   a:	bc c1       	rjmp	.+888    	; 0x384 <__vector_5>
   c:	68 c1       	rjmp	.+720    	; 0x2de <__vector_6>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	0f c2       	rjmp	.+1054   	; 0x438 <__vector_12>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e8 e1       	ldi	r30, 0x18	; 24
  3e:	f7 e0       	ldi	r31, 0x07	; 7
  40:	02 c0       	rjmp	.+4      	; 0x46 <__SREG__+0x7>
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a0 37       	cpi	r26, 0x70	; 112
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <__SREG__+0x3>

0000004c <__do_clear_bss>:
  4c:	21 e0       	ldi	r18, 0x01	; 1
  4e:	a0 e7       	ldi	r26, 0x70	; 112
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	a8 32       	cpi	r26, 0x28	; 40
  58:	b2 07       	cpc	r27, r18
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	a3 d2       	rcall	.+1350   	; 0x5a4 <main>
  5e:	5a c3       	rjmp	.+1716   	; 0x714 <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <bufferInit>:
// global variables

// initialization

void bufferInit(cBuffer* buffer, unsigned char *start, unsigned short size)
{
  62:	fc 01       	movw	r30, r24
	// begin critical section
	CRITICAL_SECTION_START;
  64:	8f b7       	in	r24, 0x3f	; 63
  66:	f8 94       	cli
	// set start pointer of the buffer
	buffer->dataptr = start;
  68:	71 83       	std	Z+1, r23	; 0x01
  6a:	60 83       	st	Z, r22
	buffer->size = size;
  6c:	53 83       	std	Z+3, r21	; 0x03
  6e:	42 83       	std	Z+2, r20	; 0x02
	// initialize index and length
	buffer->dataindex = 0;
  70:	17 82       	std	Z+7, r1	; 0x07
  72:	16 82       	std	Z+6, r1	; 0x06
	buffer->datalength = 0;
  74:	15 82       	std	Z+5, r1	; 0x05
  76:	14 82       	std	Z+4, r1	; 0x04
	// end critical section
	CRITICAL_SECTION_END;
  78:	8f bf       	out	0x3f, r24	; 63
  7a:	08 95       	ret

0000007c <bufferGetFromFront>:
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
  7c:	fc 01       	movw	r30, r24
	unsigned char data = 0;
	// begin critical section
	CRITICAL_SECTION_START;
  7e:	9f b7       	in	r25, 0x3f	; 63
  80:	f8 94       	cli
	// check to see if there's data in the buffer
	if(buffer->datalength)
  82:	24 81       	ldd	r18, Z+4	; 0x04
  84:	35 81       	ldd	r19, Z+5	; 0x05
  86:	21 15       	cp	r18, r1
  88:	31 05       	cpc	r19, r1
  8a:	c9 f0       	breq	.+50     	; 0xbe <bufferGetFromFront+0x42>
	{
		// get the first character from buffer
		data = buffer->dataptr[buffer->dataindex];
  8c:	46 81       	ldd	r20, Z+6	; 0x06
  8e:	57 81       	ldd	r21, Z+7	; 0x07
  90:	a0 81       	ld	r26, Z
  92:	b1 81       	ldd	r27, Z+1	; 0x01
  94:	a4 0f       	add	r26, r20
  96:	b5 1f       	adc	r27, r21
  98:	8c 91       	ld	r24, X
		// move index down and decrement length
		buffer->dataindex++;
  9a:	4f 5f       	subi	r20, 0xFF	; 255
  9c:	5f 4f       	sbci	r21, 0xFF	; 255
  9e:	57 83       	std	Z+7, r21	; 0x07
  a0:	46 83       	std	Z+6, r20	; 0x06
		if(buffer->dataindex >= buffer->size)
  a2:	62 81       	ldd	r22, Z+2	; 0x02
  a4:	73 81       	ldd	r23, Z+3	; 0x03
  a6:	46 17       	cp	r20, r22
  a8:	57 07       	cpc	r21, r23
  aa:	20 f0       	brcs	.+8      	; 0xb4 <bufferGetFromFront+0x38>
		{
			buffer->dataindex -= buffer->size;
  ac:	46 1b       	sub	r20, r22
  ae:	57 0b       	sbc	r21, r23
  b0:	57 83       	std	Z+7, r21	; 0x07
  b2:	46 83       	std	Z+6, r20	; 0x06
		}
		buffer->datalength--;
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	31 09       	sbc	r19, r1
  b8:	35 83       	std	Z+5, r19	; 0x05
  ba:	24 83       	std	Z+4, r18	; 0x04
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <bufferGetFromFront+0x44>
}

// access routines
unsigned char  bufferGetFromFront(cBuffer* buffer)
{
	unsigned char data = 0;
  be:	80 e0       	ldi	r24, 0x00	; 0
			buffer->dataindex -= buffer->size;
		}
		buffer->datalength--;
	}
	// end critical section
	CRITICAL_SECTION_END;
  c0:	9f bf       	out	0x3f, r25	; 63
	// return
	return data;
}
  c2:	08 95       	ret

000000c4 <bufferAddToEnd>:
	CRITICAL_SECTION_END;
	return data;
}

unsigned char bufferAddToEnd(cBuffer* buffer, unsigned char data)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	fc 01       	movw	r30, r24
  ca:	d6 2f       	mov	r29, r22
	// begin critical section
	CRITICAL_SECTION_START;
  cc:	cf b7       	in	r28, 0x3f	; 63
  ce:	f8 94       	cli
	// make sure the buffer has room
	if(buffer->datalength < buffer->size)
  d0:	84 81       	ldd	r24, Z+4	; 0x04
  d2:	95 81       	ldd	r25, Z+5	; 0x05
  d4:	62 81       	ldd	r22, Z+2	; 0x02
  d6:	73 81       	ldd	r23, Z+3	; 0x03
  d8:	86 17       	cp	r24, r22
  da:	97 07       	cpc	r25, r23
  dc:	90 f4       	brcc	.+36     	; 0x102 <bufferAddToEnd+0x3e>
	{
		// save data byte at end of buffer
		buffer->dataptr[(buffer->dataindex + buffer->datalength) % buffer->size] = data;
  de:	46 81       	ldd	r20, Z+6	; 0x06
  e0:	57 81       	ldd	r21, Z+7	; 0x07
  e2:	84 0f       	add	r24, r20
  e4:	95 1f       	adc	r25, r21
  e6:	f3 d2       	rcall	.+1510   	; 0x6ce <__udivmodhi4>
  e8:	a0 81       	ld	r26, Z
  ea:	b1 81       	ldd	r27, Z+1	; 0x01
  ec:	a8 0f       	add	r26, r24
  ee:	b9 1f       	adc	r27, r25
  f0:	dc 93       	st	X, r29
		// increment the length
		buffer->datalength++;
  f2:	84 81       	ldd	r24, Z+4	; 0x04
  f4:	95 81       	ldd	r25, Z+5	; 0x05
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	95 83       	std	Z+5, r25	; 0x05
  fa:	84 83       	std	Z+4, r24	; 0x04
		// end critical section
		CRITICAL_SECTION_END;
  fc:	cf bf       	out	0x3f, r28	; 63
		// return success
		return -1;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	02 c0       	rjmp	.+4      	; 0x106 <bufferAddToEnd+0x42>
	}
	// end critical section
	CRITICAL_SECTION_END;
 102:	cf bf       	out	0x3f, r28	; 63
	// return failure
	return 0;
 104:	80 e0       	ldi	r24, 0x00	; 0
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <encoderInit>:
{
	u08 i;
	// initialize/clear encoder data
	for(i=0; i<NUM_ENCODERS; i++)
	{
		EncoderState[i].position = 0x00;
 10c:	10 92 fe 00 	sts	0x00FE, r1
 110:	10 92 ff 00 	sts	0x00FF, r1
 114:	10 92 00 01 	sts	0x0100, r1
 118:	10 92 01 01 	sts	0x0101, r1
 11c:	10 92 02 01 	sts	0x0102, r1
 120:	10 92 03 01 	sts	0x0103, r1
 124:	10 92 04 01 	sts	0x0104, r1
 128:	10 92 05 01 	sts	0x0105, r1
	// - any-edge interrupt triggering
	// - enable interrupt

	#ifdef ENC0_VECT
		// set interrupt pins to input and apply pullup resistor
		cbi(ENC0_PHASEA_DDR, ENC0_PHASEA_PIN);
 12c:	8a 98       	cbi	0x11, 2	; 17
		sbi(ENC0_PHASEA_PORT, ENC0_PHASEA_PIN);
 12e:	92 9a       	sbi	0x12, 2	; 18
		// set encoder direction pin for input and apply pullup resistor
		cbi(ENC0_PHASEB_DDR, ENC0_PHASEB_PIN);
 130:	8c 98       	cbi	0x11, 4	; 17
		sbi(ENC0_PHASEB_PORT, ENC0_PHASEB_PIN);
 132:	94 9a       	sbi	0x12, 4	; 18
		// configure interrupts for any-edge triggering
		sbi(ENC0_ICR, ENC0_ISCX0);
 134:	85 b7       	in	r24, 0x35	; 53
 136:	81 60       	ori	r24, 0x01	; 1
 138:	85 bf       	out	0x35, r24	; 53
		cbi(ENC0_ICR, ENC0_ISCX1);
 13a:	85 b7       	in	r24, 0x35	; 53
 13c:	8d 7f       	andi	r24, 0xFD	; 253
 13e:	85 bf       	out	0x35, r24	; 53
		// enable interrupts
		sbi(IMSK, ENC0_INT);	// ISMK is auto-defined in encoder.h
 140:	8b b7       	in	r24, 0x3b	; 59
 142:	80 64       	ori	r24, 0x40	; 64
 144:	8b bf       	out	0x3b, r24	; 59
	#endif
	
	#ifdef ENC1_VECT
		// set interrupt pins to input and apply pullup resistor
		cbi(ENC1_PHASEA_DDR, ENC1_PHASEA_PIN);
 146:	8b 98       	cbi	0x11, 3	; 17
		sbi(ENC1_PHASEA_PORT, ENC1_PHASEA_PIN);
 148:	93 9a       	sbi	0x12, 3	; 18
		// set encoder direction pin for input and apply pullup resistor
		cbi(ENC1_PHASEB_DDR, ENC1_PHASEB_PIN);
 14a:	8d 98       	cbi	0x11, 5	; 17
		sbi(ENC1_PHASEB_PORT, ENC1_PHASEB_PIN);
 14c:	95 9a       	sbi	0x12, 5	; 18
		// configure interrupts for any-edge triggering
		sbi(ENC1_ICR, ENC1_ISCX0);
 14e:	85 b7       	in	r24, 0x35	; 53
 150:	84 60       	ori	r24, 0x04	; 4
 152:	85 bf       	out	0x35, r24	; 53
		cbi(ENC1_ICR, ENC1_ISCX1);
 154:	85 b7       	in	r24, 0x35	; 53
 156:	87 7f       	andi	r24, 0xF7	; 247
 158:	85 bf       	out	0x35, r24	; 53
		// enable interrupts
		sbi(IMSK, ENC1_INT);	// ISMK is auto-defined in encoder.h
 15a:	8b b7       	in	r24, 0x3b	; 59
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	8b bf       	out	0x3b, r24	; 59
		// enable interrupts
		sbi(IMSK, ENC3_INT);	// ISMK is auto-defined in encoder.h
	#endif
	
	// enable global interrupts
	sei();
 160:	78 94       	sei
 162:	08 95       	ret

00000164 <encoderOff>:
void encoderOff(void)
{
	// disable encoder interrupts
	#ifdef ENC0_VECT
		// disable interrupts
		sbi(IMSK, INT0);	// ISMK is auto-defined in encoder.h
 164:	8b b7       	in	r24, 0x3b	; 59
 166:	80 64       	ori	r24, 0x40	; 64
 168:	8b bf       	out	0x3b, r24	; 59
	#endif
	#ifdef ENC1_VECT
		// disable interrupts
		sbi(IMSK, INT1);	// ISMK is auto-defined in encoder.h
 16a:	8b b7       	in	r24, 0x3b	; 59
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	8b bf       	out	0x3b, r24	; 59
 170:	08 95       	ret

00000172 <encoderGetPosition>:
}

// encoderGetPosition() reads the current position of the encoder 
s32 encoderGetPosition(u08 encoderNum){
	// sanity check
	if(encoderNum < NUM_ENCODERS){
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	68 f4       	brcc	.+26     	; 0x190 <encoderGetPosition+0x1e>
		return (s32) EncoderState[ encoderNum ].position;
 176:	e8 2f       	mov	r30, r24
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	e2 50       	subi	r30, 0x02	; 2
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	60 81       	ld	r22, Z
 188:	71 81       	ldd	r23, Z+1	; 0x01
 18a:	82 81       	ldd	r24, Z+2	; 0x02
 18c:	93 81       	ldd	r25, Z+3	; 0x03
 18e:	08 95       	ret
	}else{
		return 0;
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	cb 01       	movw	r24, r22
		}
}
 196:	08 95       	ret

00000198 <encoderSetPosition>:

// encoderSetPosition() sets the current position of the encoder
void encoderSetPosition(u08 encoderNum, s32 position)
{
	// sanity check
	if(encoderNum < NUM_ENCODERS)
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	60 f4       	brcc	.+24     	; 0x1b4 <encoderSetPosition+0x1c>
		EncoderState[encoderNum].position = position;
 19c:	e8 2f       	mov	r30, r24
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ee 0f       	add	r30, r30
 1a2:	ff 1f       	adc	r31, r31
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	e2 50       	subi	r30, 0x02	; 2
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	40 83       	st	Z, r20
 1ae:	51 83       	std	Z+1, r21	; 0x01
 1b0:	62 83       	std	Z+2, r22	; 0x02
 1b2:	73 83       	std	Z+3, r23	; 0x03
 1b4:	08 95       	ret

000001b6 <__vector_1>:
	// else do nothing
}

#ifdef ENC0_VECT
//! Encoder 0 interrupt handler
ISR(ENC0_VECT){
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
	// encoder has generated a pulse
	// check the relative phase of the input channels
	// and update position accordingly
	if( ((ENC0_PHASEA_PORTIN & (1<<ENC0_PHASEA_PIN)) == 0) ^
 1cc:	90 b3       	in	r25, 0x10	; 16
		((ENC0_PHASEB_PORTIN & (1<<ENC0_PHASEB_PIN)) == 0) )
 1ce:	80 b3       	in	r24, 0x10	; 16
//! Encoder 0 interrupt handler
ISR(ENC0_VECT){
	// encoder has generated a pulse
	// check the relative phase of the input channels
	// and update position accordingly
	if( ((ENC0_PHASEA_PORTIN & (1<<ENC0_PHASEA_PIN)) == 0) ^
 1d0:	82 95       	swap	r24
 1d2:	81 70       	andi	r24, 0x01	; 1
 1d4:	92 fb       	bst	r25, 2
 1d6:	99 27       	eor	r25, r25
 1d8:	90 f9       	bld	r25, 0
 1da:	98 17       	cp	r25, r24
 1dc:	71 f0       	breq	.+28     	; 0x1fa <__vector_1+0x44>
		((ENC0_PHASEB_PORTIN & (1<<ENC0_PHASEB_PIN)) == 0) )
	{
		EncoderState[0].position++;
 1de:	ee ef       	ldi	r30, 0xFE	; 254
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	91 81       	ldd	r25, Z+1	; 0x01
 1e6:	a2 81       	ldd	r26, Z+2	; 0x02
 1e8:	b3 81       	ldd	r27, Z+3	; 0x03
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	a1 1d       	adc	r26, r1
 1ee:	b1 1d       	adc	r27, r1
 1f0:	80 83       	st	Z, r24
 1f2:	91 83       	std	Z+1, r25	; 0x01
 1f4:	a2 83       	std	Z+2, r26	; 0x02
 1f6:	b3 83       	std	Z+3, r27	; 0x03
 1f8:	0d c0       	rjmp	.+26     	; 0x214 <__vector_1+0x5e>
	} else {
		EncoderState[0].position--;
 1fa:	ee ef       	ldi	r30, 0xFE	; 254
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	91 81       	ldd	r25, Z+1	; 0x01
 202:	a2 81       	ldd	r26, Z+2	; 0x02
 204:	b3 81       	ldd	r27, Z+3	; 0x03
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	a1 09       	sbc	r26, r1
 20a:	b1 09       	sbc	r27, r1
 20c:	80 83       	st	Z, r24
 20e:	91 83       	std	Z+1, r25	; 0x01
 210:	a2 83       	std	Z+2, r26	; 0x02
 212:	b3 83       	std	Z+3, r27	; 0x03
	}
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <__vector_2>:
#endif

#ifdef ENC1_VECT
//! Encoder 1 interrupt handler
ISR(ENC1_VECT){
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
 238:	af 93       	push	r26
 23a:	bf 93       	push	r27
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
	// encoder has generated a pulse
	// check the relative phase of the input channels
	// and update position accordingly
	if( ((inb(ENC1_PHASEA_PORTIN) & (1<<ENC1_PHASEA_PIN)) == 0) ^
 240:	90 b3       	in	r25, 0x10	; 16
		((inb(ENC1_PHASEB_PORTIN) & (1<<ENC1_PHASEB_PIN)) == 0) )
 242:	80 b3       	in	r24, 0x10	; 16
//! Encoder 1 interrupt handler
ISR(ENC1_VECT){
	// encoder has generated a pulse
	// check the relative phase of the input channels
	// and update position accordingly
	if( ((inb(ENC1_PHASEA_PORTIN) & (1<<ENC1_PHASEA_PIN)) == 0) ^
 244:	85 fb       	bst	r24, 5
 246:	88 27       	eor	r24, r24
 248:	80 f9       	bld	r24, 0
 24a:	93 fb       	bst	r25, 3
 24c:	99 27       	eor	r25, r25
 24e:	90 f9       	bld	r25, 0
 250:	98 17       	cp	r25, r24
 252:	71 f0       	breq	.+28     	; 0x270 <__vector_2+0x46>
		((inb(ENC1_PHASEB_PORTIN) & (1<<ENC1_PHASEB_PIN)) == 0) )
	{
		EncoderState[1].position++;
 254:	e2 e0       	ldi	r30, 0x02	; 2
 256:	f1 e0       	ldi	r31, 0x01	; 1
 258:	80 81       	ld	r24, Z
 25a:	91 81       	ldd	r25, Z+1	; 0x01
 25c:	a2 81       	ldd	r26, Z+2	; 0x02
 25e:	b3 81       	ldd	r27, Z+3	; 0x03
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	a1 1d       	adc	r26, r1
 264:	b1 1d       	adc	r27, r1
 266:	80 83       	st	Z, r24
 268:	91 83       	std	Z+1, r25	; 0x01
 26a:	a2 83       	std	Z+2, r26	; 0x02
 26c:	b3 83       	std	Z+3, r27	; 0x03
 26e:	0d c0       	rjmp	.+26     	; 0x28a <__vector_2+0x60>
	} else {
		EncoderState[1].position--;
 270:	e2 e0       	ldi	r30, 0x02	; 2
 272:	f1 e0       	ldi	r31, 0x01	; 1
 274:	80 81       	ld	r24, Z
 276:	91 81       	ldd	r25, Z+1	; 0x01
 278:	a2 81       	ldd	r26, Z+2	; 0x02
 27a:	b3 81       	ldd	r27, Z+3	; 0x03
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	a1 09       	sbc	r26, r1
 280:	b1 09       	sbc	r27, r1
 282:	80 83       	st	Z, r24
 284:	91 83       	std	Z+1, r25	; 0x01
 286:	a2 83       	std	Z+2, r26	; 0x02
 288:	b3 83       	std	Z+3, r27	; 0x03
	}
}
 28a:	ff 91       	pop	r31
 28c:	ef 91       	pop	r30
 28e:	bf 91       	pop	r27
 290:	af 91       	pop	r26
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <timer0SetPrescaler>:
#endif
#ifdef TCCR0B
void timer0SetPrescaler( u08 prescale )

{
	outb(TCCR0B, (inb(TCCR0B) & ~TIMER_PRESCALE_MASK) | prescale); // set prescaler on timer 0
 2a0:	93 b7       	in	r25, 0x33	; 51
 2a2:	98 7f       	andi	r25, 0xF8	; 248
 2a4:	89 2b       	or	r24, r25
 2a6:	83 bf       	out	0x33, r24	; 51
 2a8:	08 95       	ret

000002aa <timer0Init>:
}

void timer0Init()
{
	// initialize timer 0
	timer0SetPrescaler( TIMER0PRESCALE );	// set prescaler
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	f9 df       	rcall	.-14     	; 0x2a0 <timer0SetPrescaler>
	outb(TCNT0, 0);							// reset TCNT0
 2ae:	12 be       	out	0x32, r1	; 50
	sbi(TIMSK, TOIE0);						// enable TCNT0 overflow interrupt
 2b0:	89 b7       	in	r24, 0x39	; 57
 2b2:	82 60       	ori	r24, 0x02	; 2
 2b4:	89 bf       	out	0x39, r24	; 57
}

void timer0ClearOverflowCount(void)
{
	// clear the timer overflow counter registers
	Timer0Reg0 = 0;	// initialize time registers
 2b6:	10 92 08 01 	sts	0x0108, r1
 2ba:	10 92 09 01 	sts	0x0109, r1
 2be:	10 92 0a 01 	sts	0x010A, r1
 2c2:	10 92 0b 01 	sts	0x010B, r1
 2c6:	08 95       	ret

000002c8 <timerAttach>:
#endif

void timerAttach(u08 interruptNum, void (*userFunc)(void) )
{
	// make sure the interrupt number is within bounds
	if(interruptNum < TIMER_NUM_INTERRUPTS)
 2c8:	87 30       	cpi	r24, 0x07	; 7
 2ca:	40 f4       	brcc	.+16     	; 0x2dc <timerAttach+0x14>
	{
		// set the interrupt function to run
		// the supplied user's function
		TimerIntFunc[interruptNum] = userFunc;
 2cc:	e8 2f       	mov	r30, r24
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	ee 0f       	add	r30, r30
 2d2:	ff 1f       	adc	r31, r31
 2d4:	e0 59       	subi	r30, 0x90	; 144
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	71 83       	std	Z+1, r23	; 0x01
 2da:	60 83       	st	Z, r22
 2dc:	08 95       	ret

000002de <__vector_6>:
	OCR1B = pwmDuty;
}

//! Interrupt handler for tcnt0 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER0_OVF_vect)
{
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
	Timer0Reg0++;			// increment low-order counter
 300:	80 91 08 01 	lds	r24, 0x0108
 304:	90 91 09 01 	lds	r25, 0x0109
 308:	a0 91 0a 01 	lds	r26, 0x010A
 30c:	b0 91 0b 01 	lds	r27, 0x010B
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	a1 1d       	adc	r26, r1
 314:	b1 1d       	adc	r27, r1
 316:	80 93 08 01 	sts	0x0108, r24
 31a:	90 93 09 01 	sts	0x0109, r25
 31e:	a0 93 0a 01 	sts	0x010A, r26
 322:	b0 93 0b 01 	sts	0x010B, r27

	// increment pause counter
	TimerPauseReg++;
 326:	80 91 0c 01 	lds	r24, 0x010C
 32a:	90 91 0d 01 	lds	r25, 0x010D
 32e:	a0 91 0e 01 	lds	r26, 0x010E
 332:	b0 91 0f 01 	lds	r27, 0x010F
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	a1 1d       	adc	r26, r1
 33a:	b1 1d       	adc	r27, r1
 33c:	80 93 0c 01 	sts	0x010C, r24
 340:	90 93 0d 01 	sts	0x010D, r25
 344:	a0 93 0e 01 	sts	0x010E, r26
 348:	b0 93 0f 01 	sts	0x010F, r27

	// if a user function is defined, execute it too
	if(TimerIntFunc[TIMER0OVERFLOW_INT])
 34c:	80 91 70 00 	lds	r24, 0x0070
 350:	90 91 71 00 	lds	r25, 0x0071
 354:	89 2b       	or	r24, r25
 356:	29 f0       	breq	.+10     	; 0x362 <__vector_6+0x84>
		TimerIntFunc[TIMER0OVERFLOW_INT]();
 358:	e0 91 70 00 	lds	r30, 0x0070
 35c:	f0 91 71 00 	lds	r31, 0x0071
 360:	09 95       	icall
}
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	bf 91       	pop	r27
 368:	af 91       	pop	r26
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	7f 91       	pop	r23
 370:	6f 91       	pop	r22
 372:	5f 91       	pop	r21
 374:	4f 91       	pop	r20
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <__vector_5>:

//! Interrupt handler for tcnt1 overflow interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_OVF_vect)
{
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	4f 93       	push	r20
 394:	5f 93       	push	r21
 396:	6f 93       	push	r22
 398:	7f 93       	push	r23
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
 3a2:	ef 93       	push	r30
 3a4:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OVERFLOW_INT])
 3a6:	80 91 72 00 	lds	r24, 0x0072
 3aa:	90 91 73 00 	lds	r25, 0x0073
 3ae:	89 2b       	or	r24, r25
 3b0:	29 f0       	breq	.+10     	; 0x3bc <__vector_5+0x38>
		TimerIntFunc[TIMER1OVERFLOW_INT]();
 3b2:	e0 91 72 00 	lds	r30, 0x0072
 3b6:	f0 91 73 00 	lds	r31, 0x0073
 3ba:	09 95       	icall
}
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <__vector_4>:
}
#endif

//! Interrupt handler for CutputCompare1A match (OC1A) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPA_vect)
{
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	4f 93       	push	r20
 3ee:	5f 93       	push	r21
 3f0:	6f 93       	push	r22
 3f2:	7f 93       	push	r23
 3f4:	8f 93       	push	r24
 3f6:	9f 93       	push	r25
 3f8:	af 93       	push	r26
 3fa:	bf 93       	push	r27
 3fc:	ef 93       	push	r30
 3fe:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREA_INT])
 400:	80 91 74 00 	lds	r24, 0x0074
 404:	90 91 75 00 	lds	r25, 0x0075
 408:	89 2b       	or	r24, r25
 40a:	29 f0       	breq	.+10     	; 0x416 <__vector_4+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREA_INT]();
 40c:	e0 91 74 00 	lds	r30, 0x0074
 410:	f0 91 75 00 	lds	r31, 0x0075
 414:	09 95       	icall
}
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	bf 91       	pop	r27
 41c:	af 91       	pop	r26
 41e:	9f 91       	pop	r25
 420:	8f 91       	pop	r24
 422:	7f 91       	pop	r23
 424:	6f 91       	pop	r22
 426:	5f 91       	pop	r21
 428:	4f 91       	pop	r20
 42a:	3f 91       	pop	r19
 42c:	2f 91       	pop	r18
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <__vector_12>:

//! Interrupt handler for OutputCompare1B match (OC1B) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_COMPB_vect)
{
 438:	1f 92       	push	r1
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	0f 92       	push	r0
 440:	11 24       	eor	r1, r1
 442:	2f 93       	push	r18
 444:	3f 93       	push	r19
 446:	4f 93       	push	r20
 448:	5f 93       	push	r21
 44a:	6f 93       	push	r22
 44c:	7f 93       	push	r23
 44e:	8f 93       	push	r24
 450:	9f 93       	push	r25
 452:	af 93       	push	r26
 454:	bf 93       	push	r27
 456:	ef 93       	push	r30
 458:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1OUTCOMPAREB_INT])
 45a:	80 91 76 00 	lds	r24, 0x0076
 45e:	90 91 77 00 	lds	r25, 0x0077
 462:	89 2b       	or	r24, r25
 464:	29 f0       	breq	.+10     	; 0x470 <__vector_12+0x38>
		TimerIntFunc[TIMER1OUTCOMPAREB_INT]();
 466:	e0 91 76 00 	lds	r30, 0x0076
 46a:	f0 91 77 00 	lds	r31, 0x0077
 46e:	09 95       	icall
}
 470:	ff 91       	pop	r31
 472:	ef 91       	pop	r30
 474:	bf 91       	pop	r27
 476:	af 91       	pop	r26
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	7f 91       	pop	r23
 47e:	6f 91       	pop	r22
 480:	5f 91       	pop	r21
 482:	4f 91       	pop	r20
 484:	3f 91       	pop	r19
 486:	2f 91       	pop	r18
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__vector_3>:

//! Interrupt handler for InputCapture1 (IC1) interrupt
TIMER_INTERRUPT_HANDLER(TIMER1_CAPT_vect)
{
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
 49c:	2f 93       	push	r18
 49e:	3f 93       	push	r19
 4a0:	4f 93       	push	r20
 4a2:	5f 93       	push	r21
 4a4:	6f 93       	push	r22
 4a6:	7f 93       	push	r23
 4a8:	8f 93       	push	r24
 4aa:	9f 93       	push	r25
 4ac:	af 93       	push	r26
 4ae:	bf 93       	push	r27
 4b0:	ef 93       	push	r30
 4b2:	ff 93       	push	r31
	// if a user function is defined, execute it
	if(TimerIntFunc[TIMER1INPUTCAPTURE_INT])
 4b4:	80 91 78 00 	lds	r24, 0x0078
 4b8:	90 91 79 00 	lds	r25, 0x0079
 4bc:	89 2b       	or	r24, r25
 4be:	29 f0       	breq	.+10     	; 0x4ca <__vector_3+0x38>
		TimerIntFunc[TIMER1INPUTCAPTURE_INT]();
 4c0:	e0 91 78 00 	lds	r30, 0x0078
 4c4:	f0 91 79 00 	lds	r31, 0x0079
 4c8:	09 95       	icall
}
 4ca:	ff 91       	pop	r31
 4cc:	ef 91       	pop	r30
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <uartInitBuffers>:
// create and initialize the uart transmit and receive buffers
void uartInitBuffers(void)
{
	#ifndef UART_BUFFERS_EXTERNAL_RAM
		// initialize the UART receive buffer
		bufferInit(&uartRxBuffer, uartRxData, UART_RX_BUFFER_SIZE);
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	60 ea       	ldi	r22, 0xA0	; 160
 4f2:	70 e0       	ldi	r23, 0x00	; 0
 4f4:	85 e1       	ldi	r24, 0x15	; 21
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	b4 dd       	rcall	.-1176   	; 0x62 <bufferInit>
		// initialize the UART transmit buffer
		bufferInit(&uartTxBuffer, uartTxData, UART_TX_BUFFER_SIZE);
 4fa:	40 e2       	ldi	r20, 0x20	; 32
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	60 e8       	ldi	r22, 0x80	; 128
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	8e e1       	ldi	r24, 0x1E	; 30
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	ad dd       	rcall	.-1190   	; 0x62 <bufferInit>
 508:	08 95       	ret

0000050a <uartInit>:

// enable and initialize the uart
void uartInit(void)
{
	// initialize the buffers
	uartInitBuffers();
 50a:	f0 df       	rcall	.-32     	; 0x4ec <uartInitBuffers>
	// initialize user receive handler
	UartRxFunc = 0;
 50c:	10 92 7f 00 	sts	0x007F, r1
 510:	10 92 7e 00 	sts	0x007E, r1

	// enable RxD/TxD and interrupts
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));
 514:	88 ed       	ldi	r24, 0xD8	; 216
 516:	8a b9       	out	0x0a, r24	; 10
// set the uart baud rate
void uartSetBaudRate(u32 baudrate)
{
	// calculate division factor for requested baud rate, and set it
	u16 bauddiv = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
	outb(UBRRL, bauddiv);
 518:	8f e0       	ldi	r24, 0x0F	; 15
 51a:	89 b9       	out	0x09, r24	; 9
	#ifdef UBRRH
	outb(UBRRH, bauddiv>>8);
 51c:	12 b8       	out	0x02, r1	; 2
	outb(UCR, BV(RXCIE)|BV(TXCIE)|BV(RXEN)|BV(TXEN));

	// set default baud rate
	uartSetBaudRate(UART_DEFAULT_BAUD_RATE);  
	// initialize states
	uartReadyTx = TRUE;
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	80 93 14 01 	sts	0x0114, r24
	uartBufferedTx = FALSE;
 524:	10 92 1d 01 	sts	0x011D, r1
	// clear overflow count
	uartRxOverflow = 0;
 528:	10 92 27 01 	sts	0x0127, r1
 52c:	10 92 26 01 	sts	0x0126, r1
	// enable interrupts
	sei();
 530:	78 94       	sei
 532:	08 95       	ret

00000534 <uartSendByte>:

// transmits a byte over the uart
void uartSendByte(u08 txData)
{
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 534:	90 91 14 01 	lds	r25, 0x0114
 538:	99 23       	and	r25, r25
 53a:	e1 f3       	breq	.-8      	; 0x534 <uartSendByte>
	// send byte
	outb(UDR, txData);
 53c:	8c b9       	out	0x0c, r24	; 12
	// set ready state to FALSE
	uartReadyTx = FALSE;
 53e:	10 92 14 01 	sts	0x0114, r1
 542:	08 95       	ret

00000544 <uartAddToTxBuffer>:

// add byte to end of uart Tx buffer
u08 uartAddToTxBuffer(u08 data)
{
	// add data byte to the end of the tx buffer
	return bufferAddToEnd(&uartTxBuffer, data);
 544:	68 2f       	mov	r22, r24
 546:	8e e1       	ldi	r24, 0x1E	; 30
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	bc dd       	rcall	.-1160   	; 0xc4 <bufferAddToEnd>
}
 54c:	08 95       	ret

0000054e <uartSendTxBuffer>:

// start transmission of the current uart Tx buffer contents
void uartSendTxBuffer(void)
{
	// turn on buffered transmit
	uartBufferedTx = TRUE;
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	80 93 1d 01 	sts	0x011D, r24
	// send the first byte to get things going by interrupts
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
 554:	8e e1       	ldi	r24, 0x1E	; 30
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	91 dd       	rcall	.-1246   	; 0x7c <bufferGetFromFront>
 55a:	ec df       	rcall	.-40     	; 0x534 <uartSendByte>
 55c:	08 95       	ret

0000055e <hotSwapEncoder>:
unsigned char pageNumber = 0; //modulus PAGES = page 0
signed int encoderValue[4] = {0,0,0,0}; //initialize starting encoder values
unsigned char activeEncoder = 0;

/////////////////////////////////////Code///////////////////////////////
void hotSwapEncoder(void){
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
	encoderValue[activeEncoder] = encoderValue[activeEncoder] + encoderGetPosition( 0 ); //read the stored position of the encoder and save it
 566:	c0 91 a0 00 	lds	r28, 0x00A0
 56a:	d0 e0       	ldi	r29, 0x00	; 0
 56c:	cc 0f       	add	r28, r28
 56e:	dd 1f       	adc	r29, r29
 570:	cf 55       	subi	r28, 0x5F	; 95
 572:	df 4f       	sbci	r29, 0xFF	; 255
 574:	08 81       	ld	r16, Y
 576:	19 81       	ldd	r17, Y+1	; 0x01
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	fb dd       	rcall	.-1034   	; 0x172 <encoderGetPosition>
 57c:	60 0f       	add	r22, r16
 57e:	71 1f       	adc	r23, r17
 580:	79 83       	std	Y+1, r23	; 0x01
 582:	68 83       	st	Y, r22
	encoderOff(); //pause the encoder	
 584:	ef dd       	rcall	.-1058   	; 0x164 <encoderOff>
	activeEncoder = (activeEncoder + 1) % 4; //update the program with the currently active encoder
 586:	80 91 a0 00 	lds	r24, 0x00A0
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	83 70       	andi	r24, 0x03	; 3
 590:	90 78       	andi	r25, 0x80	; 128
 592:	80 93 a0 00 	sts	0x00A0, r24
	PORTB = (activeEncoder << MULTIPLEX);//swap the encoder
 596:	88 bb       	out	0x18, r24	; 24
	encoderInit(); //re-enable encoder(s)
 598:	b9 dd       	rcall	.-1166   	; 0x10c <encoderInit>
}// End of hotSwapEncoder
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	08 95       	ret

000005a4 <main>:

int main(void)
{
	//General Initializations
	wdt_disable();	// disable watchdog timer
 5a4:	88 e1       	ldi	r24, 0x18	; 24
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	f8 94       	cli
 5aa:	81 bd       	out	0x21, r24	; 33
 5ac:	11 bc       	out	0x21, r1	; 33
 5ae:	0f be       	out	0x3f, r0	; 63
	DDRB = (3 << MULTIPLEX);
 5b0:	83 e0       	ldi	r24, 0x03	; 3
 5b2:	87 bb       	out	0x17, r24	; 23
	uartInit();	//initialize the USART (MIDI is default)
 5b4:	aa df       	rcall	.-172    	; 0x50a <uartInit>
	encoderInit();	//Initialize page and main encoder inputs
 5b6:	aa dd       	rcall	.-1196   	; 0x10c <encoderInit>
	timer0Init();	//turn on the timer
 5b8:	78 de       	rcall	.-784    	; 0x2aa <timer0Init>
	timerAttach( TIMER0OVERFLOW_INT, &hotSwapEncoder );	//set timer interrupt to change the active encoder
 5ba:	6f ea       	ldi	r22, 0xAF	; 175
 5bc:	72 e0       	ldi	r23, 0x02	; 2
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	83 de       	rcall	.-762    	; 0x2c8 <timerAttach>
 5c2:	0f 2e       	mov	r0, r31
 5c4:	f9 ea       	ldi	r31, 0xA9	; 169
 5c6:	8f 2e       	mov	r8, r31
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	9f 2e       	mov	r9, r31
 5cc:	f0 2d       	mov	r31, r0
 5ce:	0f 2e       	mov	r0, r31
 5d0:	f1 ea       	ldi	r31, 0xA1	; 161
 5d2:	cf 2e       	mov	r12, r31
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	df 2e       	mov	r13, r31
 5d8:	f0 2d       	mov	r31, r0
	PORTB = (activeEncoder << MULTIPLEX);//swap the encoder
	encoderInit(); //re-enable encoder(s)
}// End of hotSwapEncoder

int main(void)
{
 5da:	71 2c       	mov	r7, r1
 5dc:	61 2c       	mov	r6, r1
 5de:	0f 2e       	mov	r0, r31
 5e0:	f3 e0       	ldi	r31, 0x03	; 3
 5e2:	5f 2e       	mov	r5, r31
 5e4:	f0 2d       	mov	r31, r0
	timerAttach( TIMER0OVERFLOW_INT, &hotSwapEncoder );	//set timer interrupt to change the active encoder
	
    while(1){// Main Loop
		
		//update active page
		if ( (encoderGetPosition( 1 ) != 0) ){
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	c4 dd       	rcall	.-1144   	; 0x172 <encoderGetPosition>
 5ea:	67 2b       	or	r22, r23
 5ec:	68 2b       	or	r22, r24
 5ee:	69 2b       	or	r22, r25
 5f0:	09 f4       	brne	.+2      	; 0x5f4 <main+0x50>
 5f2:	68 c0       	rjmp	.+208    	; 0x6c4 <main+0x120>
			pageNumber = encoderGetPosition( 1 ) + pageNumber ; //read page encoder to determine what page to display
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	bd dd       	rcall	.-1158   	; 0x172 <encoderGetPosition>
 5f8:	80 91 a9 00 	lds	r24, 0x00A9
 5fc:	68 0f       	add	r22, r24
			pageNumber = pageNumber % PAGES;
 5fe:	63 70       	andi	r22, 0x03	; 3
 600:	60 93 a9 00 	sts	0x00A9, r22
			//display the page (LCD needed)
			
			//update the active midi values by loading from EEPROM
			eeprom_busy_wait();
 604:	e1 99       	sbic	0x1c, 1	; 28
 606:	fe cf       	rjmp	.-4      	; 0x604 <main+0x60>
			eeprom_read_block( (void*) &mParam, (const void*) midirefs + (pageNumber * 16), 16 );
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	62 95       	swap	r22
 60c:	72 95       	swap	r23
 60e:	70 7f       	andi	r23, 0xF0	; 240
 610:	76 27       	eor	r23, r22
 612:	60 7f       	andi	r22, 0xF0	; 240
 614:	76 27       	eor	r23, r22
 616:	60 50       	subi	r22, 0x00	; 0
 618:	70 40       	sbci	r23, 0x00	; 0
 61a:	40 e1       	ldi	r20, 0x10	; 16
 61c:	50 e0       	ldi	r21, 0x00	; 0
 61e:	80 e6       	ldi	r24, 0x60	; 96
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	69 d0       	rcall	.+210    	; 0x6f6 <__eerd_block_tn4313>
			encoderSetPosition( 1 , 0 );
 624:	40 e0       	ldi	r20, 0x00	; 0
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	ba 01       	movw	r22, r20
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	b5 dd       	rcall	.-1174   	; 0x198 <encoderSetPosition>
 62e:	4a c0       	rjmp	.+148    	; 0x6c4 <main+0x120>
 630:	22 97       	sbiw	r28, 0x02	; 2
 632:	fe 01       	movw	r30, r28
			//clear the page encoder position
		}
	
		//read each parameter encoder and send to MIDI out if necessary.
		for (s08 i = PARAMCOUNT; i>=0; i-- ) {
			if ( encoderValue[i] !=0 ){ // check for an update
 634:	28 81       	ld	r18, Y
 636:	39 81       	ldd	r19, Y+1	; 0x01
 638:	21 15       	cp	r18, r1
 63a:	31 05       	cpc	r19, r1
 63c:	d9 f1       	breq	.+118    	; 0x6b4 <main+0x110>
				//bind encoder updates to midi parameter values
				uint8_t updateValue = 0;
				midiParam* pParam = &mParam[i];
				uint8_t accessValue = i + (pageNumber*4); //adjust i for page-wise access
 63e:	40 91 a9 00 	lds	r20, 0x00A9
 642:	44 0f       	add	r20, r20
 644:	44 0f       	add	r20, r20
 646:	4b 0d       	add	r20, r11

				//Test min/max to set update value
				if ( encoderValue[i] + mValue[ accessValue ] > pParam->pMax){ // check if updates would run mValue over the maximum
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	da 01       	movw	r26, r20
 64c:	a6 55       	subi	r26, 0x56	; 86
 64e:	bf 4f       	sbci	r27, 0xFF	; 255
 650:	4c 90       	ld	r4, X
 652:	b9 01       	movw	r22, r18
 654:	64 0d       	add	r22, r4
 656:	71 1d       	adc	r23, r1
 658:	c8 01       	movw	r24, r16
 65a:	80 5a       	subi	r24, 0xA0	; 160
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	7c 01       	movw	r14, r24
 660:	dc 01       	movw	r26, r24
 662:	1f 96       	adiw	r26, 0x0f	; 15
 664:	ac 90       	ld	r10, X
 666:	1f 97       	sbiw	r26, 0x0f	; 15
 668:	8a 2d       	mov	r24, r10
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	86 17       	cp	r24, r22
 66e:	97 07       	cpc	r25, r23
 670:	5c f0       	brlt	.+22     	; 0x688 <main+0xe4>
					updateValue = pParam->pMax;
				} else if ( encoderValue[i] + mValue[ accessValue ] < pParam->pMin){ // check if updates would run mValue under the minimum
 672:	1e 96       	adiw	r26, 0x0e	; 14
 674:	ac 90       	ld	r10, X
 676:	8a 2d       	mov	r24, r10
 678:	99 27       	eor	r25, r25
 67a:	87 fd       	sbrc	r24, 7
 67c:	90 95       	com	r25
 67e:	68 17       	cp	r22, r24
 680:	79 07       	cpc	r23, r25
 682:	14 f0       	brlt	.+4      	; 0x688 <main+0xe4>
					updateValue = pParam->pMin;
				} else {
					updateValue = encoderValue[i] + mValue[ accessValue ]; // set the update value if safe
 684:	a4 2c       	mov	r10, r4
 686:	a2 0e       	add	r10, r18
				}
					 
				//updated global values
				mValue[ accessValue ] = updateValue; //updated status of midi parameter
 688:	da 01       	movw	r26, r20
 68a:	a6 55       	subi	r26, 0x56	; 86
 68c:	bf 4f       	sbci	r27, 0xFF	; 255
 68e:	ac 92       	st	X, r10
				encoderValue[i] = 0; // clear the update value			
 690:	11 82       	std	Z+1, r1	; 0x01
 692:	10 82       	st	Z, r1

				//Send SysEx Message
				uartAddToTxBuffer( SYSEX );
 694:	80 ef       	ldi	r24, 0xF0	; 240
 696:	56 df       	rcall	.-340    	; 0x544 <uartAddToTxBuffer>
				uartAddToTxBuffer( TX7ID );
 698:	83 e4       	ldi	r24, 0x43	; 67
 69a:	54 df       	rcall	.-344    	; 0x544 <uartAddToTxBuffer>
				uartAddToTxBuffer( MIDICHANNEL );
 69c:	81 e1       	ldi	r24, 0x11	; 17
 69e:	52 df       	rcall	.-348    	; 0x544 <uartAddToTxBuffer>
	  			uartAddToTxBuffer( pParam->pGroup );
 6a0:	f7 01       	movw	r30, r14
 6a2:	84 85       	ldd	r24, Z+12	; 0x0c
 6a4:	4f df       	rcall	.-354    	; 0x544 <uartAddToTxBuffer>
	   			uartAddToTxBuffer( pParam->pNumber );
 6a6:	d7 01       	movw	r26, r14
 6a8:	1d 96       	adiw	r26, 0x0d	; 13
 6aa:	8c 91       	ld	r24, X
 6ac:	4b df       	rcall	.-362    	; 0x544 <uartAddToTxBuffer>
	   			uartAddToTxBuffer( updateValue );
 6ae:	8a 2d       	mov	r24, r10
 6b0:	49 df       	rcall	.-366    	; 0x544 <uartAddToTxBuffer>
 				uartSendTxBuffer(); //start sending the full sysex message for a parameter update
 6b2:	4d df       	rcall	.-358    	; 0x54e <uartSendTxBuffer>
			encoderSetPosition( 1 , 0 );
			//clear the page encoder position
		}
	
		//read each parameter encoder and send to MIDI out if necessary.
		for (s08 i = PARAMCOUNT; i>=0; i-- ) {
 6b4:	ba 94       	dec	r11
 6b6:	04 50       	subi	r16, 0x04	; 4
 6b8:	11 09       	sbc	r17, r1
 6ba:	cc 15       	cp	r28, r12
 6bc:	dd 05       	cpc	r29, r13
 6be:	09 f0       	breq	.+2      	; 0x6c2 <main+0x11e>
 6c0:	b7 cf       	rjmp	.-146    	; 0x630 <main+0x8c>
 6c2:	91 cf       	rjmp	.-222    	; 0x5e6 <main+0x42>
 6c4:	e4 01       	movw	r28, r8
	PORTB = (activeEncoder << MULTIPLEX);//swap the encoder
	encoderInit(); //re-enable encoder(s)
}// End of hotSwapEncoder

int main(void)
{
 6c6:	07 2d       	mov	r16, r7
 6c8:	16 2d       	mov	r17, r6
 6ca:	b5 2c       	mov	r11, r5
 6cc:	b1 cf       	rjmp	.-158    	; 0x630 <main+0x8c>

000006ce <__udivmodhi4>:
 6ce:	aa 1b       	sub	r26, r26
 6d0:	bb 1b       	sub	r27, r27
 6d2:	51 e1       	ldi	r21, 0x11	; 17
 6d4:	07 c0       	rjmp	.+14     	; 0x6e4 <__udivmodhi4_ep>

000006d6 <__udivmodhi4_loop>:
 6d6:	aa 1f       	adc	r26, r26
 6d8:	bb 1f       	adc	r27, r27
 6da:	a6 17       	cp	r26, r22
 6dc:	b7 07       	cpc	r27, r23
 6de:	10 f0       	brcs	.+4      	; 0x6e4 <__udivmodhi4_ep>
 6e0:	a6 1b       	sub	r26, r22
 6e2:	b7 0b       	sbc	r27, r23

000006e4 <__udivmodhi4_ep>:
 6e4:	88 1f       	adc	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	5a 95       	dec	r21
 6ea:	a9 f7       	brne	.-22     	; 0x6d6 <__udivmodhi4_loop>
 6ec:	80 95       	com	r24
 6ee:	90 95       	com	r25
 6f0:	bc 01       	movw	r22, r24
 6f2:	cd 01       	movw	r24, r26
 6f4:	08 95       	ret

000006f6 <__eerd_block_tn4313>:
 6f6:	dc 01       	movw	r26, r24
 6f8:	86 2f       	mov	r24, r22

000006fa <__eerd_blraw_tn4313>:
 6fa:	e8 2f       	mov	r30, r24
 6fc:	e1 99       	sbic	0x1c, 1	; 28
 6fe:	fe cf       	rjmp	.-4      	; 0x6fc <__eerd_blraw_tn4313+0x2>
 700:	1f ba       	out	0x1f, r1	; 31
 702:	05 c0       	rjmp	.+10     	; 0x70e <__eerd_blraw_tn4313+0x14>
 704:	ee bb       	out	0x1e, r30	; 30
 706:	e0 9a       	sbi	0x1c, 0	; 28
 708:	e3 95       	inc	r30
 70a:	0d b2       	in	r0, 0x1d	; 29
 70c:	0d 92       	st	X+, r0
 70e:	41 50       	subi	r20, 0x01	; 1
 710:	c8 f7       	brcc	.-14     	; 0x704 <__eerd_blraw_tn4313+0xa>
 712:	08 95       	ret

00000714 <_exit>:
 714:	f8 94       	cli

00000716 <__stop_program>:
 716:	ff cf       	rjmp	.-2      	; 0x716 <__stop_program>
